'.source.newlisp':
      'abort':
        'prefix': 'abort'
        'body': 'abort int-pid) § (abort)'

      'abs':
        'prefix': 'abs'
        'body': 'abs num)'

      'acos':
        'prefix': 'acos'
        'body': 'acos num-radians)'

      'acosh':
        'prefix': 'acosh'
        'body': 'acosh num-radians)'

      'add':
        'prefix': 'add'
        'body': 'add num-1 [num-2 ... ])'

      'address':
        'prefix': 'address'
        'body': 'address int) § (address float) § (address str)'

      'amb':
        'prefix': 'amb'
        'body': 'amb exp-1 [exp-2 ... ])'

      'and':
        'prefix': 'and'
        'body': 'and exp-1 [exp-2 ... ])'

      'append':
        'prefix': 'append'
        'body': 'append list-1 [list-2 ... ]) § (append array-1 [array-2 ... ]) § (append str-1 [str-2 ... ])'

      'append-file':
        'prefix': 'append-file'
        'body': 'append-file str-filename str-buffer)'

      'apply':
        'prefix': 'apply'
        'body': 'apply func list [int-reduce])'

      'args':
        'prefix': 'args'
        'body': 'args § (args int-idx-1 [int-idx-2 ... ])'

      'array':
        'prefix': 'array'
        'body': 'array int-n1 [int-n2 ... ] [list-init])'

      'array-list':
        'prefix': 'array-list'
        'body': 'array-list array)'

      'array?':
        'prefix': 'array?'
        'body': 'array? exp)'

      'asin':
        'prefix': 'asin'
        'body': 'asin num-radians)'

      'asinh':
        'prefix': 'asinh'
        'body': 'asinh num-radians)'

      'assoc':
        'prefix': 'assoc'
        'body': 'assoc exp-key list-alist) § (assoc list-exp-key list-alist)'

      'atan':
        'prefix': 'atan'
        'body': 'atan num-radians)'

      'atan2':
        'prefix': 'atan2'
        'body': 'atan2 num-Y-radians num-X-radians)'

      'atanh':
        'prefix': 'atanh'
        'body': 'atanh num-radians)'

      'atom?':
        'prefix': 'atom?'
        'body': 'atom? exp)'

      'base64-dec':
        'prefix': 'base64-dec'
        'body': 'base64-dec str)'

      'base64-enc':
        'prefix': 'base64-enc'
        'body': 'base64-enc str [bool-flag])'

      'bayes-query':
        'prefix': 'bayes-query'
        'body': 'bayes-query list-L context-D [bool-chain [bool-probs]])'

      'bayes-train':
        'prefix': 'bayes-train'
        'body': 'bayes-train list-M1 [list-M2 ... ] sym-context-D)'

      'begin':
        'prefix': 'begin'
        'body': 'begin body)'

      'beta':
        'prefix': 'beta'
        'body': 'beta cum-a num-b)'

      'betai':
        'prefix': 'betai'
        'body': 'betai num-x num-a num-b)'

      'bigint':
        'prefix': 'bigint'
        'body': 'bigint number) § (bigint string)'

      'bigint?':
        'prefix': 'bigint?'
        'body': 'bigint? number)'

      'bind':
        'prefix': 'bind'
        'body': 'bind list-variable-associations [bool-eval])'

      'binomial':
        'prefix': 'binomial'
        'body': 'binomial int-n int-k float-p)'

      'bits':
        'prefix': 'bits'
        'body': 'bits int [bool])'

      'callback':
        'prefix': 'callback'
        'body': 'callback int-index sym-function) § (callback sym-function str-return-type [str_param_type ...]) § (callback sym-function)'

      'case':
        'prefix': 'case'
        'body': 'case exp-switch (exp-1 body-1) [(exp-2 body-2) ... ])'

      'catch':
        'prefix': 'catch'
        'body': 'catch exp) § (catch exp symbol)'

      'ceil':
        'prefix': 'ceil'
        'body': 'ceil number)'

      'change-dir':
        'prefix': 'change-dir'
        'body': 'change-dir str-path)'

      'char':
        'prefix': 'char'
        'body': 'char str [int-index [true]]) § (char int)'

      'chop':
        'prefix': 'chop'
        'body': 'chop str [int-chars]) § (chop list [int-elements])'

      'clean':
        'prefix': 'clean'
        'body': 'clean exp-predicate list)'

      'close':
        'prefix': 'close'
        'body': 'close int-file)'

      'command-event':
        'prefix': 'command-event'
        'body': 'command-event sym-event-handler | func-event-handler)'

      'cond':
        'prefix': 'cond'
        'body': 'cond (exp-condition-1 body-1) [(exp-condition-2 body-2) ... ])'

      'cons':
        'prefix': 'cons'
        'body': 'cons exp-1 exp-2)'

      'constant':
        'prefix': 'constant'
        'body': 'constant sym-1 exp-1 [sym-2 exp-2] ...)'

      'context':
        'prefix': 'context'
        'body': 'context [sym-context]) § (context sym-context str | sym [exp-value])'

      'context?':
        'prefix': 'context?'
        'body': 'context? exp) § (context? exp str-sym)'

      'copy':
        'prefix': 'copy'
        'body': 'copy exp)'

      'copy-file':
        'prefix': 'copy-file'
        'body': 'copy-file str-from-name str-to-name)'

      'corr':
        'prefix': 'corr'
        'body': 'corr list-vector-X list-vector-Y)'

      'cos':
        'prefix': 'cos'
        'body': 'cos num-radians)'

      'cosh':
        'prefix': 'cosh'
        'body': 'cosh num-radians)'

      'count':
        'prefix': 'count'
        'body': 'count list-1 list-2)'

      'cpymem':
        'prefix': 'cpymem'
        'body': 'cpymem int-from-address int-to-address int-bytes)'

      'crc32':
        'prefix': 'crc32'
        'body': 'crc32 str-data)'

      'crit-chi2':
        'prefix': 'crit-chi2'
        'body': 'crit-chi2 num-probability int-df)'

      'crit-f':
        'prefix': 'crit-f'
        'body': 'crit-f num-probability int-df1 int-df2)'

      'crit-t':
        'prefix': 'crit-t'
        'body': 'crit-t num-probability int-df)'

      'crit-z':
        'prefix': 'crit-z'
        'body': 'crit-z num-probability)'

      'current-line':
        'prefix': 'current-line'
        'body': 'current-line '

      'curry':
        'prefix': 'curry'
        'body': 'curry func exp)'

      'date':
        'prefix': 'date'
        'body': 'date § (date int-secs [int-offset]) § (date int-secs int-offset str-format)'

      'date-list':
        'prefix': 'date-list'
        'body': 'date-list int-seconds [int-index])'

      'date-parse':
        'prefix': 'date-parse'
        'body': 'date-parse str-date str-format)'

      'date-value':
        'prefix': 'date-value'
        'body': 'date-value int-year int-month int-day [int-hour int-min int-sec]) § (date-value)'

      'debug':
        'prefix': 'debug'
        'body': 'debug func)'

      'dec':
        'prefix': 'dec'
        'body': 'dec place [num])'

      'def-new':
        'prefix': 'def-new'
        'body': 'def-new sym-source [sym-target])'

      'default':
        'prefix': 'default'
        'body': 'default context)'

      'define':
        'prefix': 'define'
        'body': 'define (sym-name [sym-param-1 ... ]) [body-1 ... ]) § (define (sym-name [(sym-param-1 exp-default) ... ]) [body-1 ... ]) § (define sym-name exp)'

      'define-macro':
        'prefix': 'define-macro'
        'body': 'define-macro (sym-name [sym-param-1 ... ]) body) § (define-macro (sym-name [(sym-param-1 exp-default) ... ]) body)'

      'delete':
        'prefix': 'delete'
        'body': 'delete symbol [bool]) § (delete sym-context [bool])'

      'delete-file':
        'prefix': 'delete-file'
        'body': 'delete-file str-file-name)'

      'destroy':
        'prefix': 'destroy'
        'body': 'destroy int-pid) § (destroy int-pid int-signal)'

      'det':
        'prefix': 'det'
        'body': 'det matrix [float-pivot])'

      'device':
        'prefix': 'device'
        'body': 'device [int-handle])'

      'difference':
        'prefix': 'difference'
        'body': 'difference list-A list-B) § (difference list-A list-B bool)'

      'directory':
        'prefix': 'directory'
        'body': 'directory [str-path]) § (directory str-path str-paern [int-regex-option])'

      'directory?':
        'prefix': 'directory?'
        'body': 'directory? str-path)'

      'div':
        'prefix': 'div'
        'body': 'div num-1 num-2 [num-3 ... ]) § (div num-1)'

      'do-until':
        'prefix': 'do-until'
        'body': 'do-until exp-condition [body])'

      'do-while':
        'prefix': 'do-while'
        'body': 'do-while exp-condition body)'

      'doargs':
        'prefix': 'doargs'
        'body': 'doargs (sym [exp-break]) body)'

      'dolist':
        'prefix': 'dolist'
        'body': 'dolist (sym list [exp-break]) body)'

      'dostring':
        'prefix': 'dostring'
        'body': 'dostring (sym string [exp-break]) body)'

      'dotimes':
        'prefix': 'dotimes'
        'body': 'dotimes (sym-var int-count [exp-break]) body)'

      'dotree':
        'prefix': 'dotree'
        'body': 'dotree (sym sym-context [bool]) body)'

      'dump':
        'prefix': 'dump'
        'body': 'dump [exp])'

      'dup':
        'prefix': 'dup'
        'body': 'dup exp int-n [bool]) § (dup exp)'

      'empty?':
        'prefix': 'empty?'
        'body': 'empty? exp) § (empty? str)'

      'encrypt':
        'prefix': 'encrypt'
        'body': 'encrypt str-source str-pad)'

      'ends-with':
        'prefix': 'ends-with'
        'body': 'ends-with str-data str-key [num-option]) § (ends-with list exp)'

      'env':
        'prefix': 'env'
        'body': 'env § (env var-str) § (env var-str value-str)'

      'erf':
        'prefix': 'erf'
        'body': 'erf num)'

      'error-event':
        'prefix': 'error-event'
        'body': 'error-event sym-event-handler | func-event-handler)'

      'eval':
        'prefix': 'eval'
        'body': 'eval exp)'

      'eval-string':
        'prefix': 'eval-string'
        'body': 'eval-string str-source [sym-context [exp-error [int-offset]]])'

      'even?':
        'prefix': 'even?'
        'body': 'even? int-number)'

      'exec':
        'prefix': 'exec'
        'body': 'exec str-process) § (exec str-process [str-stdin])'

      'exists':
        'prefix': 'exists'
        'body': 'exists func-condition list)'

      'exit':
        'prefix': 'exit'
        'body': 'exit [int])'

      'exp':
        'prefix': 'exp'
        'body': 'exp num)'

      'expand':
        'prefix': 'expand'
        'body': 'expand exp sym-1 [sym-2 ... ]) § (expand exp list-assoc [bool]) § (expand exp)'
  
      'expand':
        'prefix': 'expand'
        'body': 'expand list list-assoc [bool])'

      'expand':
        'prefix': 'expand'
        'body': 'expand list)'

      'explode':
        'prefix': 'explode'
        'body': 'explode str [int-chunk [bool]]) § (explode list [int-chunk [bool]])'

      'extend':
        'prefix': 'extend'
        'body': 'extend list-1 [list-2 ... ]) § (extend string-1 [string-2 ... ])'

      'factor':
        'prefix': 'factor'
        'body': 'factor int)'

      'fft':
        'prefix': 'fft'
        'body': 'fft list-num)'

      'file-info':
        'prefix': 'file-info'
        'body': 'file-info str-name [int-index [bool-flag]])'

      'file?':
        'prefix': 'file?'
        'body': 'file? str-path-name [bool])'

      'filter':
        'prefix': 'filter'
        'body': 'filter exp-predicate exp-list)'

      'find':
        'prefix': 'find'
        'body': 'find exp-key list [func-compare | int-regex-option]) § (find str-key str-data [int-regex-option [int-offset]])'

      'find-all':
        'prefix': 'find-all'
        'body': 'find-all str-regex-paern str-text [exp [int-regex-option]]) § (find-all list-match-paern list [exp]) § (find-all exp-key list [exp [func-compare]])'

      'first':
        'prefix': 'first'
        'body': 'first list) § (first array) § (first str)'

      'flat':
        'prefix': 'flat'
        'body': 'flat list [int-level])'

      'float':
        'prefix': 'float'
        'body': 'float exp [exp-default])'

      'float?':
        'prefix': 'float?'
        'body': 'float? exp)'

      'floor':
        'prefix': 'floor'
        'body': 'floor number)'

      'flt':
        'prefix': 'flt'
        'body': 'flt number)'

      'fn':
        'prefix': 'fn'
        'body': 'fn (list-parameters) exp-body)'

      'for':
        'prefix': 'for'
        'body': 'for (sym num-from num-to [num-step [exp-break]]) body)'

      'for-all':
        'prefix': 'for-all'
        'body': 'for-all func-condition list)'

      'fork':
        'prefix': 'fork'
        'body': 'fork exp)'

      'format':
        'prefix': 'format'
        'body': 'format str-format exp-data-1 [exp-data-2 ... ]) § (format str-format list-data)'

      'fv':
        'prefix': 'fv'
        'body': 'fv num-rate num-nper num-pmt num-pv [int-type])'

      'gammai':
        'prefix': 'gammai'
        'body': 'gammai num-a num-b)'

      'gammaln':
        'prefix': 'gammaln'
        'body': 'gammaln num-x)'

      'gcd':
        'prefix': 'gcd'
        'body': 'gcd int-1 [int-2 ... ])'

      'get-char':
        'prefix': 'get-char'
        'body': 'get-char int-address)'

      'get-float':
        'prefix': 'get-float'
        'body': 'get-float int-address)'

      'get-int':
        'prefix': 'get-int'
        'body': 'get-int int-address)'

      'get-long':
        'prefix': 'get-long'
        'body': 'get-long int-address)'

      'get-string':
        'prefix': 'get-string'
        'body': 'get-string int-address)'

      'get-url':
        'prefix': 'get-url'
        'body': 'get-url str-url [str-option] [int-timeout [str-header]])'

      'global':
        'prefix': 'global'
        'body': 'global sym-1 [sym-2 ... ])'

      'global?':
        'prefix': 'global?'
        'body': 'global? sym)'

      'if':
        'prefix': 'if'
        'body': 'if exp-condition exp-1 [exp-2]) § (if exp-cond-1 exp-1 exp-cond-2 exp-2 [ ... ])'

      'if-not':
        'prefix': 'if-not'
        'body': 'if-not exp-condition exp-1 [exp-2])'

      'ifft':
        'prefix': 'ifft'
        'body': 'ifft list-num)'

      'import':
        'prefix': 'import'
        'body': 'import str-lib-name str-function-name ["cdecl"]) § (import str-lib-name str-function-name str-return-type [str-param-type . . .]) § (import str-lib-name)'

      'inc':
        'prefix': 'inc'
        'body': 'inc place [num])'

      'index':
        'prefix': 'index'
        'body': 'index exp-predicate exp-list)'

      'inf?':
        'prefix': 'inf?'
        'body': 'inf? float)'

      'int':
        'prefix': 'int'
        'body': 'int exp [exp-default [int-base]])'

      'integer?':
        'prefix': 'integer?'
        'body': 'integer? exp)'

      'intersect':
        'prefix': 'intersect'
        'body': 'intersect list-A list-B) § (intersect list-A list-B bool)'

      'invert':
        'prefix': 'invert'
        'body': 'invert matrix [float-pivot])'

      'irr':
        'prefix': 'irr'
        'body': 'irr list-amounts [list-times [num-guess]])'

      'json-error':
        'prefix': 'json-error'
        'body': 'json-error '

      'json-parse':
        'prefix': 'json-parse'
        'body': 'json-parse str-json-data)'

      'join':
        'prefix': 'join'
        'body': 'join list-of-strings [str-joint [bool-trail-joint]])'

      'kmeans-query':
        'prefix': 'kmeans-query'
        'body': 'kmeans-query list-data matrix-centroids) § (kmeans-query list-data matrix-data)'

      'kmeans-train':
        'prefix': 'kmeans-train'
        'body': 'kmeans-train matrix-data int-k context [matrix-centroids])'

      'lambda?':
        'prefix': 'lambda?'
        'body': 'lambda? exp)'

      'last':
        'prefix': 'last'
        'body': 'last list) § (last array) § (last str)'

      'last-error':
        'prefix': 'last-error'
        'body': 'last-error § (last-error int-error)'

      'legal?':
        'prefix': 'legal?'
        'body': 'legal? str)'

      'length':
        'prefix': 'length'
        'body': 'length exp)'

      'let':
        'prefix': 'let'
        'body': 'let ((sym1 [exp-init1]) [(sym2 [exp-init2]) ... ]) body) § (let (sym1 exp-init1 [sym2 exp-init2 ... ]) body)'

      'letex':
        'prefix': 'letex'
        'body': 'letex ((sym1 [exp-init1]) [(sym2 [exp-init2]) ... ]) body) § (letex (sym1 exp-init1 [sym2 exp-init2 ... ]) body)'

      'letn':
        'prefix': 'letn'
        'body': 'letn ((sym1 [exp-init1]) [(sym2 [exp-init2]) ... ]) body) § (letn (sym1 exp-init1 [sym2 exp-init2 ... ]) body)'

      'list':
        'prefix': 'list'
        'body': 'list exp-1 [exp-2 ... ])'

      'list?':
        'prefix': 'list?'
        'body': 'list? exp)'

      'load':
        'prefix': 'load'
        'body': 'load str-file-name-1 [str-file-name-2 ... ] [sym-context])'

      'local':
        'prefix': 'local'
        'body': 'local (sym-1 [sym-2 ... ]) body)'

      'log':
        'prefix': 'log'
        'body': 'log num) § (log num num-base)'

      'lookup':
        'prefix': 'lookup'
        'body': 'lookup exp-key list-assoc [int-index [exp-default]])'

      'lower-case':
        'prefix': 'lower-case'
        'body': 'lower-case str)'

      'macro?':
        'prefix': 'macro?'
        'body': 'macro? exp)'

      'main-args':
        'prefix': 'main-args'
        'body': 'main-args § (main-args int-index)'

      'make-dir':
        'prefix': 'make-dir'
        'body': 'make-dir str-dir-name [int-mode])'

      'map':
        'prefix': 'map'
        'body': 'map exp-functor list-args-1 [list-args-2 ... ])'

      'mat':
        'prefix': 'mat'
        'body': 'mat + | - | * | / matrix-A matrix-B) § (mat + | - | * | / matrix-A number)'

      'match':
        'prefix': 'match'
        'body': 'match list-paern list-match [bool])'

      'max':
        'prefix': 'max'
        'body': 'max num-1 [num-2 ... ])'

      'member':
        'prefix': 'member'
        'body': 'member exp list) § (member str-key str [num-option])'

      'min':
        'prefix': 'min'
        'body': 'min num-1 [num-2 ... ])'

      'mod':
        'prefix': 'mod'
        'body': 'mod num-1 num-2 [num-3 ... ]) § (mod num-1)'

      'mul':
        'prefix': 'mul'
        'body': 'mul num-1 num-2 [num-3 ... ])'

      'multiply':
        'prefix': 'multiply'
        'body': 'multiply matrix-A matrix-B)'

      'net-accept':
        'prefix': 'net-accept'
        'body': 'net-accept int-socket)'

      'net-close':
        'prefix': 'net-close'
        'body': 'net-close int-socket [true])'

      'net-connect':
        'prefix': 'net-connect'
        'body': 'net-connect str-remote-host int-port [int-timeout-ms]) § (net-connect str-remote-host int-port [str-mode [int-l]]) § (net-connect str-file-path)'

      'net-error':
        'prefix': 'net-error'
        'body': 'net-error § (net-error int-error)'

      'net-eval':
        'prefix': 'net-eval'
        'body': 'net-eval str-host int-port exp [int-timeout [func-handler]]) § (net-eval \'((str-host int-port exp) ... ) [int-timeout [func-handler]])'

      'net-interface':
        'prefix': 'net-interface'
        'body': 'net-interface str-ip-addr) § (net-interface)'

      'net-ipv':
        'prefix': 'net-ipv'
        'body': 'net-ipv int-version) § (net-ipv)'

      'net-listen':
        'prefix': 'net-listen'
        'body': 'net-listen int-port [str-ip-addr [str-mode]]) § (net-listen str-file-path)'

      'net-local':
        'prefix': 'net-local'
        'body': 'net-local int-socket)'

      'net-lookup':
        'prefix': 'net-lookup'
        'body': 'net-lookup str-ip-number) § (net-lookup str-hostname [bool])'

      'net-packet':
        'prefix': 'net-packet'
        'body': 'net-packet str-packet)'

      'net-peek':
        'prefix': 'net-peek'
        'body': 'net-peek int-socket)'

      'net-peer':
        'prefix': 'net-peer'
        'body': 'net-peer int-socket)'

      'net-ping':
        'prefix': 'net-ping'
        'body': 'net-ping str-address [int-timeout [int-count bool]]]) § (net-ping list-addresses [int-timeout [int-count bool]]])'

      'net-receive':
        'prefix': 'net-receive'
        'body': 'net-receive int-socket sym-buffer int-max-bytes [wait-string])'

      'net-receive-from':
        'prefix': 'net-receive-from'
        'body': 'net-receive-from int-socket int-max-size)'

      'net-receive-udp':
        'prefix': 'net-receive-udp'
        'body': 'net-receive-udp int-port int-maxsize [int-microsec [str-addr-if]])'

      'net-select':
        'prefix': 'net-select'
        'body': 'net-select int-socket str-mode int-micro-seconds) § (net-select list-sockets str-mode int-micro-seconds)'

      'net-send':
        'prefix': 'net-send'
        'body': 'net-send int-socket str-buffer [int-num-bytes])'

      'net-send-to':
        'prefix': 'net-send-to'
        'body': 'net-send-to str-remotehost int-remoteport str-buffer int-socket)'

      'net-send-udp':
        'prefix': 'net-send-udp'
        'body': 'net-send-udp str-remotehost int-remoteport str-buffer [bool])'

      'net-service':
        'prefix': 'net-service'
        'body': 'net-service str-service str-protocol) § (net-service int-port str-protocol)'

      'net-sessions':
        'prefix': 'net-sessions'
        'body': 'net-sessions '

      'new':
        'prefix': 'new'
        'body': 'new context-source sym-context-target [bool]) § (new context-source)'

      'nil?':
        'prefix': 'nil?'
        'body': 'nil? exp)'

      'normal':
        'prefix': 'normal'
        'body': 'normal float-mean float-stdev int-n) § (normal float-mean float-stdev)'

      'not':
        'prefix': 'not'
        'body': 'not exp)'

      'now':
        'prefix': 'now'
        'body': 'now [int-minutes-offset [int-index]])'

      'nper':
        'prefix': 'nper'
        'body': 'nper num-interest num-pmt num-pv [num-fv [int-type]])'

      'npv':
        'prefix': 'npv'
        'body': 'npv num-interest list-values)'

      'nth':
        'prefix': 'nth'
        'body': 'nth int-index list) § (nth int-index array) § (nth int-index str) § § (nth list-indices list) § (nth list-indices array)'

      'null?':
        'prefix': 'null?'
        'body': 'null? exp)'

      'number?':
        'prefix': 'number?'
        'body': 'number? exp)'

      'odd?':
        'prefix': 'odd?'
        'body': 'odd? int-number)'

      'open':
        'prefix': 'open'
        'body': 'open str-path-file str-access-mode [str-option])'

      'or':
        'prefix': 'or'
        'body': 'or exp-1 [exp-2 ... ])'

      'pack':
        'prefix': 'pack'
        'body': 'pack str-format exp-1 [exp-2 ... ]) § (pack str-format list) § § (pack struct exp-1 [exp-2 ... ]) § (pack struct list)'

      'parse':
        'prefix': 'parse'
        'body': 'parse str-data [str-break [int-option]])'

      'peek':
        'prefix': 'peek'
        'body': 'peek int-handle)'

      'pipe':
        'prefix': 'pipe'
        'body': 'pipe '

      'pop':
        'prefix': 'pop'
        'body': 'pop list [int-index-1 [int-index-2 ... ]]) § (pop list [list-indexes]) § § (pop str [int-index [int-length]])'

      'pop-assoc':
        'prefix': 'pop-assoc'
        'body': 'pop-assoc exp-key list-assoc) § (pop-assoc list-keys list-assoc)'

      'post-url':
        'prefix': 'post-url'
        'body': 'post-url str-url str-content [str-content-type [str-option] [int-timeout [ str-header]]])'

      'pow':
        'prefix': 'pow'
        'body': 'pow num-1 num-2 [num-3 ... ]) § (pow num-1)'

      'prefix':
        'prefix': 'prefix'
        'body': 'prefix sym)'

      'pretty-print':
        'prefix': 'pretty-print'
        'body': 'pretty-print [int-length [str-tab [str-fp-format]])'

      'primitive?':
        'prefix': 'primitive?'
        'body': 'primitive? exp)'

      'print':
        'prefix': 'print'
        'body': 'print exp-1 [exp-2 ... ])'

      'println':
        'prefix': 'println'
        'body': 'println exp-1 [exp-2 ... ])'

      'prob-chi2':
        'prefix': 'prob-chi2'
        'body': 'prob-chi2 num-chi2 int-df)'

      'prob-f':
        'prefix': 'prob-f'
        'body': 'prob-f num-f int-df1 int-df2)'

      'prob-t':
        'prefix': 'prob-t'
        'body': 'prob-t num-t int-df1)'

      'prob-z':
        'prefix': 'prob-z'
        'body': 'prob-z num-z)'

      'process':
        'prefix': 'process'
        'body': 'process str-command) § (process str-command int-pipe-in int-pipe-out [int-win32-option]) § (process str-command int-pipe-in int-pipe-out [int-unix-pipe-error])'

      'prompt-event':
        'prefix': 'prompt-event'
        'body': 'prompt-event sym-event-handler | func-event-handler)'

      'protected?':
        'prefix': 'protected?'
        'body': 'protected? sym)'

      'push':
        'prefix': 'push'
        'body': 'push exp list [int-index-1 [int-index-2 ... ]]) § (push exp list [list-indexes]) § § (push str-1 str-2 [int-index])'

      'put-url':
        'prefix': 'put-url'
        'body': 'put-url str-url str-content [str-option] [int-timeout [str-header]])'

      'pv':
        'prefix': 'pv'
        'body': 'pv num-int num-nper num-pmt [num-fv [int-type]])'

      'quote':
        'prefix': 'quote'
        'body': 'quote exp)'

      'quote?':
        'prefix': 'quote?'
        'body': 'quote? exp)'

      'rand':
        'prefix': 'rand'
        'body': 'rand int-range [int-N])'

      'random':
        'prefix': 'random'
        'body': 'random float-offset float-scale int-n) § (random float-offset float-scale)'

      'randomize':
        'prefix': 'randomize'
        'body': 'randomize list [bool])'

      'read':
        'prefix': 'read'
        'body': 'read int-file sym-buffer int-size [str-wait])'

      'read-char':
        'prefix': 'read-char'
        'body': 'read-char [int-file])'

      'read-expr':
        'prefix': 'read-expr'
        'body': 'read-expr str-source [sym-context [exp-error [int-offset]]])'

      'read-file':
        'prefix': 'read-file'
        'body': 'read-file str-file-name)'

      'read-key':
        'prefix': 'read-key'
        'body': 'read-key '

      'read-line':
        'prefix': 'read-line'
        'body': 'read-line [int-file])'

      'read-utf8':
        'prefix': 'read-utf8'
        'body': 'read-utf8 int-file)'

      'reader-event':
        'prefix': 'reader-event'
        'body': 'reader-event [sym-event-handler | func-event-handler]) § (reader-event \'nil)'

      'real-path':
        'prefix': 'real-path'
        'body': 'real-path [str-path]) § (real-path str-exec-name true) '

      'receive':
        'prefix': 'receive'
        'body': 'receive int-pid sym-message) § (receive)'

      'ref':
        'prefix': 'ref'
        'body': 'ref exp-key list [func-compare [true]])'

      'ref-all':
        'prefix': 'ref-all'
        'body': 'ref-all exp-key list [func-compare [true]])'

      'regex':
        'prefix': 'regex'
        'body': 'regex str-paern str-text [int-option [int-offset]])'

      'regex-comp':
        'prefix': 'regex-comp'
        'body': 'regex-comp str-paern [int-option])'

      'remove-dir':
        'prefix': 'remove-dir'
        'body': 'remove-dir str-path)'

      'rename-file':
        'prefix': 'rename-file'
        'body': 'rename-file str-path-old str-path-new)'

      'replace':
        'prefix': 'replace'
        'body': 'replace exp-key list exp-replacement [func-compare]) § (replace exp-key list) § § (replace str-key str-data exp-replacement) § (replace str-paern str-data exp-replacement int-regex-option)'

      'reset':
        'prefix': 'reset'
        'body': 'reset § (reset true)'

      'rest':
        'prefix': 'rest'
        'body': 'rest list) § (rest array) § (rest str)'

      'reverse':
        'prefix': 'reverse'
        'body': 'reverse list) § (reverse array) § (reverse string)'

      'rotate':
        'prefix': 'rotate'
        'body': 'rotate list [int-count]) § (rotate str [int-count])'

      'round':
        'prefix': 'round'
        'body': 'round number [int-digits])'

      'save':
        'prefix': 'save'
        'body': 'save str-file) § (save str-file sym-1 [sym-2 ... ])'

      'search':
        'prefix': 'search'
        'body': 'search int-file str-search [bool-flag [int-options]])'

      'seed':
        'prefix': 'seed'
        'body': 'seed int-seed)'

      'self':
        'prefix': 'self'
        'body': 'self [int-index ... ])'

      'seek':
        'prefix': 'seek'
        'body': 'seek int-file [int-position])'

      'select':
        'prefix': 'select'
        'body': 'select list list-selection) § (select list [int-index_i ... ]) § § (select string list-selection) § (select string [int-index_i ... ])'

      'semaphore':
        'prefix': 'semaphore'
        'body': 'semaphore § (semaphore int-id) § (semaphore int-id int-wait) § (semaphore int-id int-signal) § (semaphore int-id 0)'

      'send':
        'prefix': 'send'
        'body': 'send int-pid exp) § (send)'

      'sequence':
        'prefix': 'sequence'
        'body': 'sequence num-start num-end [num-step])'

      'series':
        'prefix': 'series'
        'body': 'series num-start num-factor num-count) § (series exp-start func num-count)'

      'set':
        'prefix': 'set'
        'body': 'set sym-1 exp-1 [sym-2 exp-2 ... ])'

      'set-locale':
        'prefix': 'set-locale'
        'body': 'set-locale [str-locale [int-category]])'

      'set-ref':
        'prefix': 'set-ref'
        'body': 'set-ref exp-key list exp-replacement [func-compare])'

      'set-ref-all':
        'prefix': 'set-ref-all'
        'body': 'set-ref-all exp-key list exp-replacement [func-compare])'

      'setq':
        'prefix': 'setq'
        'body': 'setq place-1 exp-1 [place-2 exp-2 ... ])'

      'sgn':
        'prefix': 'sgn'
        'body': 'sgn num) § (sgn num exp-1 [exp-2 [exp-3]])'

      'share':
        'prefix': 'share'
        'body': 'share § (share int-address-or-handle) § (share int-address-or-handle exp-value) § § (share nil int-address)'

      'signal':
        'prefix': 'signal'
        'body': 'signal int-signal sym-event-handler | func-event-handler) § (signal int-signal "ignore" | "default" | "reset") § (signal int-signal)'

      'silent':
        'prefix': 'silent'
        'body': 'silent [exp-1 [exp-2 ... ]])'

      'sin':
        'prefix': 'sin'
        'body': 'sin num-radians)'

      'sinh':
        'prefix': 'sinh'
        'body': 'sinh num-radians)'

      'sleep':
        'prefix': 'sleep'
        'body': 'sleep num-milliseconds)'

      'slice':
        'prefix': 'slice'
        'body': 'slice list int-index [int-length]) § (slice array int-index [int-length]) § (slice str int-index [int-length])'

      'sort':
        'prefix': 'sort'
        'body': 'sort list [func-compare]) § (sort array [func-compare])'

      'source':
        'prefix': 'source'
        'body': 'source § (source sym-1 [sym-2 ... ])'

      'spawn':
        'prefix': 'spawn'
        'body': 'spawn sym exp [true])'

      'sqrt':
        'prefix': 'sqrt'
        'body': 'sqrt num)'

      'starts-with':
        'prefix': 'starts-with'
        'body': 'starts-with str str-key [num-option]) § (starts-with list [exp])'

      'stats':
        'prefix': 'stats'
        'body': 'stats list-vector)'

      'string':
        'prefix': 'string'
        'body': 'string exp-1 [exp-2 ... ])'

      'string?':
        'prefix': 'string?'
        'body': 'string? exp)'

      'struct':
        'prefix': 'struct'
        'body': 'struct symbol [str-data-type ... ])'

      'sub':
        'prefix': 'sub'
        'body': 'sub num-1 [num-2 ... ])'

      'swap':
        'prefix': 'swap'
        'body': 'swap place-1 place-2)'

      'sym':
        'prefix': 'sym'
        'body': 'sym string [sym-context [nil-flag]]) § (sym number [sym-context [nil-flag]]) § (sym symbol [sym-context [nil-flag]])'

      'symbol?':
        'prefix': 'symbol?'
        'body': 'symbol? exp)'

      'symbols':
        'prefix': 'symbols'
        'body': 'symbols [context])'

      'sync':
        'prefix': 'sync'
        'body': 'sync int-timeout [func-inlet]) § (sync)'

      'sys-error':
        'prefix': 'sys-error'
        'body': 'sys-error § (sys-error int-error) § (sys-error 0)'

      'sys-info':
        'prefix': 'sys-info'
        'body': 'sys-info [int-idx])'

      't-test':
        'prefix': 't-test'
        'body': 't-test list-vector number-value) § (t-test list-vector-A list-vector-B [true]) § (t-test list-vector-A list-vector-B float-probability)'

      'tan':
        'prefix': 'tan'
        'body': 'tan num-radians)'

      'tanh':
        'prefix': 'tanh'
        'body': 'tanh num-radians)'

      'term':
        'prefix': 'term'
        'body': 'term symbol)'

      'throw':
        'prefix': 'throw'
        'body': 'throw exp)'

      'throw-error':
        'prefix': 'throw-error'
        'body': 'throw-error exp)'

      'time':
        'prefix': 'time'
        'body': 'time exp [int-count)'

      'time-of-day':
        'prefix': 'time-of-day'
        'body': 'time-of-day '

      'timer':
        'prefix': 'timer'
        'body': 'timer sym-event-handler | func-event-handler num-seconds [int-option]) § (timer sym-event-handler | func-event-handler) § (timer)'

      'title-case':
        'prefix': 'title-case'
        'body': 'title-case str [bool])'

      'trace':
        'prefix': 'trace'
        'body': 'trace [bool])'

      'trace-highlight':
        'prefix': 'trace-highlight'
        'body': 'trace-highlight str-pre str-post [str-header str-footer])'

      'transpose':
        'prefix': 'transpose'
        'body': 'transpose matrix)'

      'trim':
        'prefix': 'trim'
        'body': 'trim str [str-char]) § (trim str str-left-char str-right-char)'

      'true?':
        'prefix': 'true?'
        'body': 'true? exp)'

      'unicode':
        'prefix': 'unicode'
        'body': 'unicode str-utf8)'

      'unify':
        'prefix': 'unify'
        'body': 'unify exp-1 exp-2 [list-env])'

      'union':
        'prefix': 'union'
        'body': 'union list-1 list-2 [list-3 ... ])'

      'unique':
        'prefix': 'unique'
        'body': 'unique list)'

      'unless':
        'prefix': 'unless'
        'body': 'unless exp-condition body)'

      'unpack':
        'prefix': 'unpack'
        'body': 'unpack str-format str-addr-packed) § (unpack str-format num-addr-packed) § § (unpack struct num-addr-packed) § (unpack struct str-addr-packed)'

      'until':
        'prefix': 'until'
        'body': 'until exp-condition [body])'

      'upper-case':
        'prefix': 'upper-case'
        'body': 'upper-case str)'

      'utf8':
        'prefix': 'utf8'
        'body': 'utf8 str-unicode)'

      'utf8len':
        'prefix': 'utf8len'
        'body': 'utf8len str)'

      'uuid':
        'prefix': 'uuid'
        'body': 'uuid [str-node])'

      'wait-pid':
        'prefix': 'wait-pid'
        'body': 'wait-pid int-pid [int-options | nil])'

      'when':
        'prefix': 'when'
        'body': 'when exp-condition body)'

      'while':
        'prefix': 'while'
        'body': 'while exp-condition body)'

      'write':
        'prefix': 'write'
        'body': 'write int-file str-buffer [int-size]) § (write str str-buffer [int-size])'

      'write-char':
        'prefix': 'write-char'
        'body': 'write-char int-file int-byte1 [int-byte2 ... ])'

      'write-file':
        'prefix': 'write-file'
        'body': 'write-file str-file-name str-buffer)'

      'write-line':
        'prefix': 'write-line'
        'body': 'write-line [int-file [str]]) § (write-line str-out [str]])'

      'xfer-event':
        'prefix': 'xfer-event'
        'body': 'xfer-event sym-event-handler | func-event-handler)'

      'xml-error':
        'prefix': 'xml-error'
        'body': 'xml-error '

      'xml-parse':
        'prefix': 'xml-parse'
        'body': 'xml-parse string-xml [int-options [sym-context [func-callback]]])'

      'xml-type-tags':
        'prefix': 'xml-type-tags'
        'body': 'xml-type-tags [exp-text-tag exp-cdata-tag exp-comment-tag exp-element-tags])'

      'zero?':
        'prefix': 'zero?'
        'body': 'zero? exp)'
